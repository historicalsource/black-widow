	.TITLE BBWAVE
	.INCLUDE BBRAM
;
;      *******************************************************
;      * COPYRIGHT 1982 ATARI. UNAUTHORIZED REPRODUCTION,    *
;      * ADAPTATION, DISTRIBUTION, PERFORMANCE OR DISPLAY OF *
;      * THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL *
;      * WORK IS STRICTLY PROHIBITED!!!!!!!                  *
;      *******************************************************
;
; EXTERNAL REFERENCES
;
	.GLOBL SUMS6	;CHECKSUM FOR B000-BFFF
	.GLOBL DANCES	;DANCE ROUTINES
	.GLOBL MEMCPY	;COPY FROM TO TO
	.GLOBL SNDEW	;END OF WAVE SOUND
	.GLOBL DELTAS	;WEB SLOPE TABLE
;
; GLOBAL DEFINITIONS
;
	.GLOBL WAVE	;WAVE MAINTENANACE
	.GLOBL WALLS
	.GLOBL ZIPPER
;
;.TUNE
;	SET UP ADDR. OF TUNE AND SET FLAG TO START PLAYING
;		SETS UP THE TUNE IN ACC OF PASSED AS TNUM
;
	.IF NE,0
.MACRO	.TUNE	PVC,TNUM	;POKEY1 VOICE (1-4), TUNE #
.IF	NB,<TNUM>
	LDA	#TNUM
.ENDC
	ASL
	TAX			;SET UP OFFSET INTO TUNE TABLE
	LDA	X,TUNTAB
.IF	EQ,PVC-1
	STA	OPTR1
	LDA	X,TUNTAB+1
	STA	OPTR1+1
	STA	VIU1
.ENDC
.IF	EQ,PVC-2
	STA	OPTR2
	LDA	X,TUNTAB+1
	STA	OPTR2+1
	STA	VIU2
.ENDC
.ENDM
	.ENDC
;
ZRED	= 0C
ZGREEN	= 7
ZYELLO	= 4
;
;
;IF IT'S TIME...ACTIVATE ANOTHER HOSTILE
;
;
; AERIAL CIRCUS ORCHESTRATION TABLE
;
; BYTE N: 0= END OF MANEUVER
;	  -= TARGET FOR PLAYER FOR N+1 FRAMES
;	  += # OF HEADING CHANGES OF N+1
;
CHKSM6::	.WORD SUMS6	;CHECKSUM FOR B000-BFFF
DANCES:	.BYTE 10.,0	;HEAD STRAIGHT AT FIRST
	.BYTE 5,2	;RIGHT ZIG 45
	.BYTE 5.,0	;STRAIGHT
	.BYTE 5,-2	;LEFT ZAG 45
	.BYTE 10.,0	;STRAIGHT
	.BYTE 5,2	;RIGHT ZIG 45
	.BYTE 5.,0
	.BYTE -1,20.
	.BYTE 32.,2	;RIGHT TURN 360
	.BYTE 32.,-2	;LEFT 360
	.BYTE 20.,0	;LITTLE STRAIGHT
	.BYTE -1,20.	;ATTACK
	.BYTE 16.,2	;U TURN RIGHT
	.BYTE 15.,0
	.BYTE 8,-4
	.BYTE 15.,0
	.BYTE -1,30.
	.BYTE 32.,2
	.BYTE 16.,-4
	.BYTE 8,8
	.BYTE -1,20.
	.BYTE 0		;REPEAT
;
; WHEN ALL MOSQUITOS, BEETLES & HORNETS
; HAVE BEEN PLANTED & KILLED... END OF WAVE
;
WAVE:	BIT ATRACT	;IF NOT ATTRACT DO IT NORMALLY
	BMI DEMO
	JMP NOSHOW	;NORMAL PROCESSING
;
; WHEN IN ATTRACT GAME PLAY... WE GIVE A SHORT COURSE ON
; THE OBJECT OF THE GAME
;
; PHASE #	WHAT WE'RE DOING
;
;	0	PUT 4 $'S AND PLAYER ON SCREEN
;	1	WAIT FOR PLAYER TO TAG THEM ALL
;	2	PUT 6 BUGS ON SCREEN
;	3	WAIT FOR PLAYER TO SHOOT AND TAG THEM
;	4	PUT 6 EGGS ON SCREEN
;	5 	WAIT FOR PLAYER TO SHOOT/PUSH THEM OFF WEB
;	6	PUT UP 2 GRENADES A BEETLE AND A HORNET
;	7	WAIT FOR PLAYER TO BLOW EM UP
;	8	ESTABLISH LOGO AS NEXT DISPLAY STATE
;
DEMO:	LDA SDFLAG
	BNE DEMRTS	;WAIT FOR END OF TWINKLE
	LDA WVTIME	;2 SECONDS BETWEEN PHASES
	CMP #2
	BCS GODEMO	;DO IT
	LDA BUGSHW	;IF 0 2 4 6 NEXT THEN KILL OFF BEASTIES
	AND #1
	BNE 20$
	LDX #10
10$:	LDA #DEAD
	STA X,OBJFLG
	TXA
	CLC
	ADC #10
	TAX
	BNE 10$
20$:	RTS
GODEMO:	LDA #0	;MAKE SURE WALKIN IS CLEAR
	STA WALKIN
	LDA BUGSHW	;PHASE COUNTER
	ASL
	TAX
	LDA X,DEMTBL+1	;GET PROCESS ADDRESS
	PHA
	LDA X,DEMTBL	;NOW GET LSB
	PHA
DEMRTS:	RTS		;GO TO CORRECT PROCESS
;
DEMTBL:	.WORD SETUP1-1	;SET UP 4 $ TARGETS
	.WORD ALLDED-1	;WAIT FOR HIM TO GET THEM ALL
	.WORD SETUP2-1	;SETUP HALF DOZEN BUGS
	.WORD ALLDED-1	;WAIT FOR HIM TO SHOOT AND TAG THEM
	.WORD SETUP4-1	;SETUP 6 EGGS TO BE PUSHED
	.WORD ALLDED-1	;WAIT FOR THEM TO BE SHOVED OFF
	.WORD SETUP6-1	;GRENADES FOR FUN
	.WORD ALLDED-1
;
; PUT 4 GRUB STEAKS ONE OF EACH VALUE FOR PLAYER TO RUN OVER
;
SETUP1:	LDAL DOLAR5
	STA FROM	;POINT ORIGIN AT TABLE OF DESCRIPTORS
	LDAH DOLAR5
	STA FROM+1
	LDX #<4*16.>	;4 BAD GUYS
	LDA #0
	STA OBJABX
	STA OBJABY
	STA OBJABX+1
	LDA #28
	STA OBJABY+1
	JMP PLACER	;COPY DESCRIPTORS AND INCREMENT MODE #
;
PLACER:	LDA #50		;ALWAYS COPY INTO OBJECTS 50 AND ON
	STA TO
	LDA #2		;MOTION OBJECTS AT 250...2F0
	STA TO+1
	JSR MEMCPY
	JMP INCPHZ	;INCREMENT TO NEXT PHASE
;
; PUT 6 ASSORTED TARGETS FOR HIM TO SHOOT AT
;
SETUP2:	LDAL TARGT6
	STA FROM
	LDAH TARGT6
	STA FROM+1
	LDX #<6*16.>
	LDA #0
	STA OBJABX
	STA OBJABY
	STA OBJABX+1
	STA OBJABY+1
	JMP PLACER
;
; PUT UP 6 EGGS FOR HIM TO PUSH
;
SETUP4:	LDAL EGGS6
	STA FROM
	LDAH EGGS6
	STA FROM+1
	LDX #<6*16.>
	LDA #0
	STA OBJABX
	STA OBJABY
	STA OBJABX+1
	STA NEGGS
	LDA #40
	STA OBJABY+1
	JMP PLACER
;
; PUT OUT SOME GRENADES TO BLOW UP
;
SETUP6:	LDAL BOMBER
	STA FROM
	LDAH BOMBER
	STA FROM+1
	LDX #<4*16.>
	LDA #0
	STA OBJABX
	STA OBJABY
	STA OBJABY+1
	LDA #18
	STA OBJABX+1
	JMP PLACER
;
; WAIT FOR PLAYER TO ACCOMPLISH HIS MISSION
;
ALLDED:	LDX #50	;WAIT FOR EVERYTHING INCLUDING BULLETS TO DIE OFF
10$:	LDA X,OBJFLG
	AND #3
	CMP #3
	BEQ 20$	;THIS ONE'S DEAD
	RTS	;FOUND ONE THAT WASN'T DEAD EXIT
20$:	TXA
	CLC
	ADC #10
	TAX
	BNE 10$	;MAKE SURE THEY'RE ALL DEAD
INCPHZ:	LDA #0
	STA WVTIME
	INC BUGSHW	;INCREMENT PHASE NUMBER
	LDA BUGSHW	;ONCE WE GET TO 6 WE'RE DONE
	CMP #8
	BCS FINIS	;DONE...
	RTS
;
; DONE WITH THE DEMONSTRATION... SELECT LOGO AS NEXT STATE
;
FINIS:	LDA #2	;LOGO MODE
	STA DTIME+1	;INDEX TO LOGO STATE
	LDA #0	;SET TIMER EXPIRED
	STA DTIME
	RTS
;
; HERE LIES THE DEMONSTRATION BODIES AWAITING PLACEMENT
;
;	0:MOSQUITO	1:SPIDER	2:HORNET	3:EGG
;	4:BULLET	5:$ BUG		6:MUTANT	7:BEETLE
;	8:TORPEDO	9:TBUG#1	A:TBUG#2	B:GRUB-STEAK
;	C:SPARE		D:GRENADE	E:VCB		F:FFF
;
;	.BYTE FLG,AUX,ARM,RNG,STP,SPD,HDG,DX,DY,ABX.ABX,ABY.ABY,DLY,TGT,SIZ
;
DOLAR5:	.BYTE   0, 0B,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,0F0, 18,  0,  3
	.BYTE   0, 0B,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,0E0, 10,  0,  3
	.BYTE   0, 0B,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,0D0,  8,  0,  3
	.BYTE   0, 0B,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,0C0,  6,  0,  3
;
TARGT6:	.BYTE   0,  0,  0,  0,  0,  1,  0, 0, 0,  0, 28,  0, 50,  1,  0,  2
	.BYTE   0,  0,  0,  0,  0,  1,  0, 0, 0,  0, 64,  0, 14,  1,  0,  2
	.BYTE   0,  2,  0,  0,  0,  1,  0, 0, 0,  0, 50,  0,0C4,  1,  0,  3
	.BYTE   0,  2,  0,  0,  0,  1,  0, 0, 0,  0,0D8,  0,0B0,  1,  0,  3
	.BYTE   0,  7,  0,  0,  0,  1,  0, 0, 0,  0, 9C,  0,0EC,  1,  0,  4
	.BYTE   0,  7,  0,  0,  0,  1,  0, 0, 0,  0,0B0,  0, 3C,  1,  0,  4
;
EGGS6:	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0, 10, 18,  0,  3
	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0, 10,  0,0E0, 14,  0,  3
	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0, 40,  0,0C0, 10,  0,  3
	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0, 28,  0,0E0, 0C,  0,  3
	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0,0F0,  0,0D8,  8,  0,  3
	.BYTE   0,  3,  0,  0,  0,  0,  0, 0, 0,  0,0B8,  0,0C8,  4,  0,  3
;
BOMBER:	.BYTE   0, 0D,  0,  0,  0,  0,  0, 0, 0,  0,0A0,  0, 18,  4,  0,  3
	.BYTE   0,  2,  0,  0,  0,  0,  0, 0, 0,  0,098,  0, 30,  4,  0,  3
	.BYTE   0, 0D,  0,  0,  0,  0,  0, 0, 0,  0,0A8,  0,0E0,  4,  0,  3
	.BYTE   0,  7,  0,  0,  0,  0,  0, 0, 0,  0, 98,  0,0D8,  4,  0,  3
;
NOSHOW:	LDA NITBUG	;NO WAVE WHILE DYING OR BUGS EXIT
	ORA WALKIN	;OR IF PLAYER WALKS IN
	ORA DIED	;OR WHILE DYING
	BEQ TADEM	;NOT SUSPENDING A WAVE
SPRKXT:	RTS
TADEM:	LDA SDFLAG	;NOT DURING A SPARKLE
	BNE SPRKXT	;CAN'T ADD RIGHT NOW
	LDX #15.	;TALLY BODIES YET TO PLANT
	LDA #0
SUMBAD:	CLC
	ADC X,BADASS
	DEX
	BPL SUMBAD
	STA BAD2GO	;# BODIES YET TO ADD
	LDA PARADE	;IF CHALLENGE, EVENLY SPACED INTROS
	BNE TIMIT
	LDA BAD2GO
	BEQ CHKDNE	;NO MORE TO PLANT
	JMP NEDSUM
TIMIT:	LDA BAD2GO
	BNE TIMR
	LDA BADGUY
	BNE NOTWVE	;NOT WAVE END
	JMP NXTWV
NOTWVE:	RTS
TIMR:	DEC KILLER	;THUMB TWIDLE BETWEEN INTRODUCTIONS
	BMI ADBUGR	;ADD A PARADEE
	RTS
ADBUGR:	LDX SPEEDY
	CPX #8		;PAST SPEED 7 ALL OR 1 FRAME APART
	BCC NOTMAX
	LDX #7
;
; ALWAYS ADD THUNDERBUGS IN SEQUENTIAL SLOTS
; IN CASE LEADER GETS SHOT EARLY...
;
NOTMAX:	LDA X,INTROS	;SPACING
	STA KILLER
	LDA #11.
	SEC
	SBC BADASS+9
	ASL
	ASL
	ASL
	ASL
	ADC #50		;WHICH SLOT TO USE
	TAX
	JMP GRWTBG
CHKDNE:	LDA BADGUY	;FOLKS STILL ACTIVE
	ORA ACTIVE	;FFF/VCB MIGHT BE LEAVING
	BNE TOUGH	;YEP
	JMP NXTWV
TOUGH:	LDA WVTIME	;EVERY 15 SECS SPEED GOES UP
	AND #0F
	BEQ TUFFY
EASY:	RTS
TUFFY:	LDA FRMCNT
	AND #1F
	BNE EASY
	INC SPEED
	LDA SPEED
	CMP #8
	BCC COWNT
	DEC SPEED
COWNT:	LDA HOWMNY
	CMP #11.	;11 MAX...?
	BCS TWOMNY
	INC HOWMNY	;ALLOWABLE BAD
TWOMNY:	RTS
;
; DO NOT EXCEED MAXIMUM ACTIVE COUNT
;
NEDSUM:	LDA BADGUY	;MOVING
	CLC
	ADC ACTIVE	;#VCB/FFF
	CMP HOWMNY
	BCC NOTFUL	;NOT AT LIMIT OF BADDIES YET
	JSR TOUGH	;MAKE IT HARDER
	JMP GROW1	;FOR VCB/ KILLBUG TIMER
NOTFUL:	LDA BADGUY	;MORE TO PLANT, HOW MANY ACTIVE?
	BEQ GRWONE	;IF NONE AROUND FORCE ONE
	JMP ADDBAD	;ADD ONE IF POKEY AGREES
GRWONE:	JMP GROW1	;FORCE AT LEAST ONE
NOSAVE:	JMP NONSAV
;
; END OF WAVE!!! BLINK WEB
;
NXTWV:	JSR ZIPPER	;TURN OFF ALL ELECTRIC STRANDS
;
	LDA #0A0
	STA WEBCLR
	LDA #0
	STA TWKCLR
	LDA #0D		;TWINKLE AND GET & PAINT NEW WEBS
	STA SDFLAG
	LDA #0
	STA NITBUG
	STA TWKCLR
	STA NEGGS	;RESET EGG OR T-BUG TAG COUNTER
	STA TAGGED	;#VCB/FFF TARGETS BEATEN OUT
	STA WVTIME
;
; SAVE WAVE AND EVENT STATUS IN CASE A
; RESUME GAME IS USED
;
	INC BINWAV
	BIT ATRACT	;ATTRACT DON'T COUNT
	BMI NOSAVE
	LDA RESUME	;LEAVE PREV SCORE THIS WAVE ALONE
	BNE NOSAVE	;DON'T ALTER SCORES AWAITING $ BUG
	LDA BINWAV	;SAVE SCORE AT END OF WAVE
	BEQ NOSAVE	;NO SAVING AT GAME START
	LSR
	BCS NOSAVE	;ONLY SAVE EVERY 4TH WAVE
	LSR
	BCS NOSAVE
	SEC
	SBC #1
	STA TEMP	;MULTIPLY BY 3
	ASL
	ADC TEMP
	TAX		;INDEX INTO PSCORE
;
; DO BIG TIME SPARKLE
;
	LDA #0
	STA IENTRY
	LDA #0E		;BIG TIME AND PAINT CORECT WALLS
	STA SDFLAG
;
; REPLACE PSCORE IF CURRENT SCORE IS GREATER
;
	SEC
	LDA SCORE+2	;SAVE MSB
	SBC X,PSCORE+2
	LDA SCORE+1
	SBC X,PSCORE+1
	LDA SCORE	;LSB TENS & ONES
	SBC X,PSCORE
	BCC 10$		;WE DIDN'T BEAT PREVIOUS
	LDA SCORE	;SAVE MSB
	STA X,PSCORE
	STA TEMP1
	LDA SCORE+1
	STA X,PSCORE+1
	STA TEMP2
	LDA SCORE+2	;LSB TENS & ONES
	STA X,PSCORE+2
	STA TEMP3
22$:	LDA TEMP2	;ADD 15,000
	SED
	CLC
	ADC #50
	STA TEMP2
	LDA TEMP1
	ADC #1
	STA TEMP1
	CLD
	INX
	INX
	INX
	CPX #75.
	BCS 10$		;OFF END OF TABLE
	LDA X,PSCORE+2
	SEC
	SBC TEMP3
	LDA X,PSCORE+1
	SBC TEMP2
	LDA X,PSCORE
	SBC TEMP1
	BCS 22$		;ALREADY A HIGHER VALUE IN TABLE
	LDA TEMP3
	STA X,PSCORE+2
	LDA TEMP2
	STA X,PSCORE+1
	LDA TEMP1
	STA X,PSCORE
	JMP 22$
;
; NOW THAT WE'VE BEATEN THE PREVIOUS SCORE AT THIS POINT
; EXTEND OUR SCORE + 15,000 TO NEXT AND SO ON (UNLESS ALREADY BETTER)
;
;
10$:	LDA EVENTS
	STA RESEVT
	LDA BINWAV	;BINARY WAVE#
	STA RESBIN
;
	JSR SNDEW	;PLAY THE END WAVE SOUND
;
;
NONSAV:	LDA BINWAV	;TEST FOR WRAP-AROUND
;
; STARTING W/ WAVE 37 SPEED UP EVERY 4TH
;
	CMP #33.	;THERE YET?
	BCC NOHOP	;NOPE
	AND #7
	BNE NOHOP
	INC RESPED
	LDA RESPED
	CMP #8.
	BCC NOHOP
	DEC RESPED
NOHOP:	LDA BINWAV
	AND #3
	EOR #3
	BNE DUERAT	;NOT A CHALLENGE
	STA INSYNC	;DANCERS NO IN SYCH
	LDA #1
	STA PARADE	;INDICATE PARADE LAP
;
; SHIFT & ADD A BIT TO <EVENTS>
;
	ASL EVENTS
	INC EVENTS
;
; ABOUT TO BEGIN A CHALLENGE WAVE, SO KILL EVERYTHING
;
	LDX #10
NOBODY:	LDA #DEAD
	STA X,OBJFLG
	TXA
	CLC
	ADC #10
	TAX
	BNE NOBODY
;
	LDA #1		;SET TIMER FOR 1ST T-BUG APPEARANCE
	STA KILLER
	LDA SPEEDY	;SPEED 12 IS MAX
	CLC
	ADC #1
	CMP #0A
	BCS GOVERN	;THAT'S TOPS
	STA SPEEDY
GOVERN:	STA SPEED
	LDA #11.
	STA BADASS+9	;11 TYPE 9 CRITTERS
	RTS
DUERAT:	LDA BINWAV	;SPEED/SMARTS USE BINARY WAVE#
	STA TEMP
	SEC
	SBC #60.	;LAST WAVE THE REPEAT PREV 4
	BMI 10$
	AND #7
	CLC
	ADC #52.
	STA TEMP
10$:	LDA TEMP
	ASL		;3 BYTES/WAVE IN WAVSPD
	ADC TEMP
	TAX
	LDA X,WAVSPD	;GET RATE OF APPEAR MASK
	AND #0F		;LS 4 BITS IS GROWTH MASK
	ASL
	ORA #1
	STA GROWTH
	LDA X,WAVSPD	;MS 4 BITS IS SPEED
	LSR
	LSR
	LSR
	LSR
	STA SPEED
	LDA X,WAVSPD+1	;MAX BADDIES ON SCREEN
	STA HOWMNY
	LDA X,WAVSPD+2	;#FRAMES BETWEEN INTROS
	STA KILLER
	STA SQUAD
	LDY #0		;COPY TO BADASS
	STY PARADE	;NOT A CHALLENGE WAVE
;
; FIND START OF THIS WAVE
;
	LDX #0		;INDEX INTO WAVBOD
	STX BAD2GO	;JUST TO MAKE SURE
	LDY TEMP	;NON-WRAPPED WAVE #
	BEQ CPYWAV
SCNBOD:	LDA X,WAVBOD
	BEQ ENDTW
	AND #0F0	;TYPE E OR F ENDS IT
	CMP #0E0
	BCS ENDTW
	INX
	JMP SCNBOD
ENDTW:	INX
	DEY
	BNE SCNBOD
;
; HIGH NIBBLE IS TYPE, LOW IS COUNT
;
CPYWAV:	LDA X,WAVBOD	;TYPE
	LSR
	LSR
	LSR
	LSR
	TAY		;INDEX INTO BADASS
	LDA X,WAVBOD
	AND #0F
;
; EASY GETS # BAD GUYS * 3/4
; HARD GETS # BAD GUYS * 5/4
;
; GRENADES, FFF'S AND VCB'S NOT CHANGED
;
	CPY #0D	;GRENADES AND ABOVE NOT CHANGED
	BCS PUTBDY
	STA TEMP	;SAVE # GUYS
	LDA $TOUGH	;0=EASY 1=NORM 2=HARD
	BEQ EZWAVE	;3/4
	CMP #2
	BEQ HRDWAV	;5/4
	LDA TEMP
PUTBDY:	STA Y,BADASS
	CLC
	ADC BAD2GO
	STA BAD2GO
NOCOWN:	LDA X,WAVBOD
	AND #0F0
	CMP #0E0
	BCS NNDWV
	INX
	JMP CPYWAV	;GET NEXT TYPE
EZWAVE:	LDA TEMP
MULWAV:	ASL
	ADC TEMP
	LSR
	LSR
	JMP PUTBDY
HRDWAV:	LDA TEMP
	ASL
	JMP MULWAV
;
; IF RESUMING GAME THEN ADD THE BONUS BUG
;
NNDWV:	LDA RESUME	;RESUMING PLAY?
	BEQ DZIT4N	;NOPE
	DEC RESUME
	BNE DZIT4N
	LDA #1
	STA BADASS+5	;$ BUG IS #5
DZIT4N:	RTS
;
ADDBAD:	DEC KILLER	;COUNT DOWN BETWEEN BUGS
	BNE WVRTS	; NOT TIME YET
	LDA SQUAD	;RESET DOWN-COUNTER
	STA KILLER
;
GROW1:	LDX #50
ADBD1$:	LDA X,OBJFLG		;IS THIS ONE FREE?
	AND #HEALTH
	CMP #DEAD
	BEQ ADBD2$
	CLC
	TXA
	ADC #10
	TAX
	CMP #0	;USE ALL OBJECTS
	BNE ADBD1$
;
; ALL MOTION OBJECTS IN USE....
; IF A VCB/FFF IS ACTIVE RETURN
; OTHERWISE ... IF MORE THAN 15 SECONDS
; SINCE LAST KILL... OFF A RANDOM OBJECT
;
	LDA ACTIVE	;VCB/FFF ON THE PROWL?
	BEQ OFFONE	;NOPE... TEST COUNTER
	LDA WVTIME	;IF ACTIVE SAY A KILL WAS MADE
	STA WAVNUM
WVRTS:	RTS
;
; NO VCB/FFF AROUND... IF MORE THAN 15 SECS
; SINCE A KILL... PICK A TARGET
;
OFFONE:	LDA WVTIME	;#SECONDS INTO WAVE
	SEC
	SBC WAVNUM	;DIFFERENCE MUST BE < 15
	CMP #15.
	BCC WVRTS	;DON'T DO IT YET
SNUFF1:	LDA RANDOM
	AND #0F0	;OBJECT INDEX
	CMP #50		;DON'T KILL BULLETS
	BCC SNUFF1	;PICK ANOTHER
	TAY
	LDA Y,OBJAUX	;DON'T KILL THE $
	AND #0F
	CMP #5
	BEQ SNUFF1
	LDA #DEAD
	STA Y,OBJFLG
	LDA WVTIME
	STA WAVNUM
	RTS
;
ADBD2$:
	LDA PARADE
	BEQ ADBDX$
GRWTBG:	LDA BADASS+9	;ONLY THE LEADER PICKS
	CMP #11.	;WE ARE THE 1ST
	BEQ GETFXR	;PICK INTRO ARM
	LDA INTARM
	JMP HAVARM
GETFXR:	LDA RANDOM
	AND #0F
	CMP #12.
	BCS GETFXR
	STA INTARM
	JMP HAVARM	;THESE CAN BE PLANTED RIGHT ON TOP
;
; SPDARM CONTAINS ARM # WHERE PLAYER IS IF
; NEEDED....
;
ADBDX$:	LDA #0
	STA TEMP1
	LDA SPDARM	;PLAYER LOCATION
	CMP #11.
	BEQ PIKARM
	STA TEMP1
	INC TEMP1	;DON'T PLANT AT PLAYER LOC OR +1
PIKARM:	LDA RANDOM	;RANDOM ARM LOCATION
	AND #0F
POSARM:	CMP #12.
	BCC PUTHIM
	SEC
	SBC #12.
PUTHIM:	CMP SPDARM
	BEQ PIKARM
	CMP TEMP1
	BEQ PIKARM
HAVARM:	TAY		;SAVE ARM # FOR XY CALC
	LDA Y,INLOOK	;CENTER HEADING BY ARM #
	STA X,OBJHDG
;
	LDA #1		;MAKE THESE GUYS TARGET SOON
	STA X,OBJDLY
	TYA		;GET ARM# * 4
	ASL
	ASL
	TAY
	LDA Y,STPNTS	;STARTING X/Y POSITION
	STA X,OBJABX
	LDA Y,STPNTS+1
	STA X,OBJABX+1
	LDA Y,STPNTS+2
	STA X,OBJABY
	LDA Y,STPNTS+3
	STA X,OBJABY+1
	TXA		;SAVE OBJECT INDEX IN Y
	TAY
	LDA PARADE	;CHALLENGE WAVE?
	BEQ TRND	;NOPE
	LDA SPEED
	STA Y,OBJSPD
	LDAL DANCES
	STA X,OBJARM
	LDAH DANCES
	STA X,OBJRNG
	LDX #9		;TYPE 9 CRITTERS ONLY
	STX TEMP
	JMP BUGGER
TRND:	LDA SPEED
	STA Y,OBJSPD
;
PIKTYP:	LDA RANDOM	;RANDOMLY PICK TYPE
	AND #0F
	TAX
	STA TEMP	;SAVE OBJECT TYPE
	CMP #0E		;VCB/FFF MUST HAVE ARM=0
	BCC NOHNTR
	LDA BADGUY
	BNE ADAFFF	;IF BADDIES AROUND OK
	LDA BAD2GO	;IF O N L Y VCB OR FFF LEFT, END IT
	CMP BADASS+0E
	BEQ NOMOE
	CMP BADASS+0F
	BEQ NOMOE
ADAFFF:	LDA WVTIME	;WON'T SHOW UP DURING 1ST 15 SECONDS
	CMP #5
	BCC NOVCB
	LDA #0		;TO MAKE HIM TARGET
	STA Y,OBJARM	;FFF NEVER HAS TARGET
	LDA SPEED
	LSR
	STA Y,OBJSPD
NOHNTR:	LDA X,BADASS
	BEQ PIKTYP	;LOOK AGAIN
BUGGER:	DEC X,BADASS	;DECREMENT # LEFT
	LDA Y,OBJAUX	;SET OBJECT TYPE
	AND #0F0
	ORA TEMP
	STA Y,OBJAUX
;
	LDA #0		;SET ALIVE FOR THIS GUY
	STA Y,OBJFLG
NOVCB:	RTS
;
NOMOE:	LDA #0
	STA BADASS+0E
	STA BADASS+0F
	RTS
;
; INTRODUCTION OF ACROBATS VARIES WITH SPEED
;
INLOOK:	.BYTE 37.,41.,46.
	.BYTE 50.,55.,59.
	.BYTE 5.,9.,14.
	.BYTE 18.,23.,27.
INTROS:	.BYTE 10,9,8,7,6,5,4,3
;
; REMOVE ELECTRIC FENCE
;
ZIPPER:	LDX #11.
	LDA #0	;INDICATING WEBS GONE
RMVFNC:	STA X,WEBS	;SET TIMER ALMOST UP
	DEX
	BPL RMVFNC
	RTS
;
; STARTING X/Y POSITIONS BY ARM NUMBER
;
STPNTS:	.WORD 20.*8*40,40.*8*40
	.WORD 40.*8*40,30.*8*40
	.WORD 50.*8*40,10.*8*40
	.WORD 50.*8*40,-10.*8*40
	.WORD 40.*8*40,-30.*8*40
	.WORD 20.*8*40,-40.*8*40
	.WORD -20.*8*40,-40.*8*40
	.WORD -40.*8*40,-30.*8*40
	.WORD -50.*8*40,-10.*8*40
	.WORD -50.*8*40,10.*8*40
	.WORD -40.*8*40,30.*8*40
	.WORD -20.*8*40,40.*8*40
;
;WAVE DEFINITIONS -
;
; WALLS ARE INDEXED BY ARM NUMBER
; AND WITHIN EACH ENTRY A RING NUMBER
; AND COLOR IS FOUND
;
; RING NUMBERS ARE STORED *6
; AND COLORS ARE 0=NONE 1=GREEN 2=YELLOW 3=RED
;
; IE .BYTE 5*6+2*64 MEANS RING 5 YELLOW WALL
;
; WAVE 1 IS 1ST WAVE
;
	.MACRO WALL R,C
	.BYTE	<<R*6>!<C*64.>>&^H0FF
	.ENDM
;
WGRN	= 1
WYEL	= 2
WRED	= 3
;
;WAVE 1
;
WALLS:	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 5,WGRN
;
;WAVE 2
;
	WALL 7,WGRN
	WALL 6,WGRN
	WALL 5,WGRN
	WALL 4,WGRN
	WALL 3,WGRN
	WALL 2,WGRN
	WALL 3,WGRN
	WALL 4,WGRN
	WALL 5,WGRN
	WALL 6,WGRN
	WALL 7,WGRN
	WALL 7,WGRN
;
;WAVE 3
;
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 5,WGRN
	WALL 4,WYEL
;
;WAVE 4
;
	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0
;
;WAVE 5
;
	WALL 5,WGRN
	WALL 5,WYEL
	WALL 5,WGRN
	WALL 5,WYEL
	WALL 5,WGRN
	WALL 5,WYEL
	WALL 5,WGRN
	WALL 5,WYEL
	WALL 5,WGRN
	WALL 5,WYEL
	WALL 5,WGRN
	WALL 5,WYEL
;
;WAVE 6
;
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 4,WYEL
	WALL 5,WGRN
	WALL 4,WYEL
;
;WAVE 7
;
	WALL 4,WYEL
	WALL 5,WYEL
	WALL 6,WYEL
	WALL 7,WYEL
	WALL 7,WYEL
	WALL 7,WYEL
	WALL 7,WYEL
	WALL 7,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
;
;WAVE 8
;
	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0
;
;WAVE 9
;
	WALL 4,WYEL
	WALL 4,WYEL
	WALL 4,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 4,WYEL
	WALL 4,WYEL
	WALL 4,WYEL
	WALL 4,WYEL
;
;WAVE 10
;
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
	WALL 3,WYEL
;
;WAVE 11
;
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 3,WGRN
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 3,WGRN
	WALL 5,WYEL
	WALL 5,WYEL
	WALL 5,WYEL
;
;WAVE 12
;
	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0
;
; WAVSPD CONTAINS 19 ENTRIES (ONE PER WAVE)
; THROUGH THE 3 WAVES THAT HAVE FFF'S
;
; EACH ENTRY IS THREE BYTES LONG
;
; 1ST ENTRY IS SPEED (0:SLOWEST...F:FASTEST)
; IN HIGH 4 BITS
;
; LOW 4 BITS HOLD GROWTH MASK /2
;
; 2ND ENTRY IS MAX # -1 OF BAD GUYS ALLOWED
;
; 3RD ENTRY IS # FRAMES BETWEEN THEIR APPEARANCE
;
;*************************************************
	.SBTTL MORSE
MORSE1::	.BYTE 2,0BB,0AA,30,5F,0EE,3D,0A8	;MORSE
WAVSPD:
;
; ALL EGGS
;
	.BYTE 0F,4,25.	;1
	.BYTE 1F,5,25.	;2
	.BYTE 1F,6,25.	;3
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 1F,7,25.	;5
	.BYTE 2F,8,25.	;6
	.BYTE 2F,9,25.	;7
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
;GRENADE APPEARS
;
	.BYTE 3F,10.,24.	;9 : 1 GRENADE
	.BYTE 3F,10.,23.	;10 : 2 GRENADES
	.BYTE 3F,10.,22.	;11 : 4 GRENADES ( A DOLLAR)
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 37,10.,21.	;13 10 SLOW GRENADES
	.BYTE 37,10.,20.	;14
	.BYTE 47,10.,20.	;15
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 47,10.,20.	;17
	.BYTE 47,10.,20.	;18
	.BYTE 47,10.,20.	;19
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 47,10.,20.	;21
	.BYTE 47,10.,20.	;22
	.BYTE 47,10.,20.	;23
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 47,10.,20.	;25
	.BYTE 47,10.,20.	;26
	.BYTE 47,10.,20.	;27
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,10.,20.	;29
	.BYTE 57,10.,20.	;30
	.BYTE 57,10.,20.	;31
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,10.,20.	;33
	.BYTE 57,10.,20.	;34
	.BYTE 57,10.,20.	;35
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,10.,15.	;37
	.BYTE 57,10.,15.	;38
	.BYTE 57,10.,15.	;39
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,10.,15.	;41
	.BYTE 57,10.,15.	;42
	.BYTE 57,10.,15.	;43
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,11.,15.	;45
	.BYTE 57,11.,15.	;46
	.BYTE 57,11.,5.		;47
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,10.,15.	;49
	.BYTE 57,10.,15.	;50
	.BYTE 57,10.,15.	;51
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,11.,7	;53
	.BYTE 57,11.,7	;54
	.BYTE 67,11.,7	;55
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
	.BYTE 57,11.,7	;57
	.BYTE 67,11.,7	;58
	.BYTE 77,11.,7	;59
	.BYTE 0,0,0	;SPARE... COULD BE ANYTHING
;
; WAVBOD HOLDS # OF CRITTERS (BY OBJECT TYPE)
;
; IN FORM .BYTE TYPE*10+NUMBER
;
WAVBOD:	.BYTE 25,75,05,0E1	;WAVE 1
	.BYTE 25,75,05,0E1	;WAVE 2
	.BYTE 25,75,05,0E1	;WAVE 3
	.BYTE 0			;WAVE 4
	.BYTE 25,75,05,0E1	;WAVE 5
	.BYTE 25,75,05,0E1	;WAVE 6
	.BYTE 25,75,05,0E1	;WAVE 7
	.BYTE 0			;WAVE 8
	.BYTE 25,75,05,0D1,0E1	;WAVE 9
	.BYTE 25,75,05,0D2,0E1	;WAVE 10
	.BYTE 25,75,05,0D4,0E1	;WAVE 11
	.BYTE 0			;WAVE 12
	.BYTE 0DB,0E1		;WAVE 13
	.BYTE 25,75,05,0D1,0E1	;WAVE 14
	.BYTE 25,75,05,0D2,0E1	;WAVE 15
	.BYTE 0			;WAVE 16
	.BYTE 0A,0F1	;WAVE 17
	.BYTE 0A,0F2	;WAVE 18
	.BYTE 0A,0F3	;WAVE 19
	.BYTE 0			;WAVE 20
	.BYTE 25,75,05,0D1,0F1	;WAVE 21
	.BYTE 25,75,05,0D2,0F1	;WAVE 22
	.BYTE 25,75,05,0D4,0F1	;WAVE 23
	.BYTE 0	;WAVE 24
	.BYTE 25,75,05,0D1,0F1	;WAVE 25
	.BYTE 25,75,05,0D2,0F1	;WAVE 26
	.BYTE 25,75,05,0D4,0F1	;WAVE 27
	.BYTE 0	;WAVE 28
	.BYTE 25,75,05,0D2,0F1	;WAVE 29
	.BYTE 25,75,05,0D4,0F1	;WAVE 30
	.BYTE 25,75,05,0D8,0F1	;WAVE 31
	.BYTE 0	;WAVE 32
	.BYTE 25,75,05,0D2,0F1	;WAVE 33
	.BYTE 25,75,05,0D4,0F1	;WAVE 34
	.BYTE 25,75,05,0D8,0F1	;WAVE 35
	.BYTE 0	;WAVE 36
	.BYTE 25,75,05,0D2,0F1	;WAVE 37
	.BYTE 25,75,05,0D2,0F2	;WAVE 38
	.BYTE 25,75,05,0D4,0F4	;WAVE 39
	.BYTE 0	;WAVE 40
	.BYTE 25,75,05,0D2,0F1	;WAVE 41
	.BYTE 25,75,05,0D4,0F2	;WAVE 42
	.BYTE 25,75,05,0D8,0F4	;WAVE 43
	.BYTE 0	;WAVE 44
	.BYTE 25,75,05,0D2,0F1	;WAVE 45
	.BYTE 25,75,05,0D4,0F2	;WAVE 46
	.BYTE 25,75,05,0D8,0F4	;WAVE 47
	.BYTE 0	;WAVE 48
	.BYTE 25,75,05,0D2,0F2	;WAVE 49
	.BYTE 25,75,05,0D4,0F2	;WAVE 50
	.BYTE 25,75,05,0D4,0F2	;WAVE 51
	.BYTE 0	;WAVE 52
	.BYTE 02,7A,2A,0D4,0F3	;WAVE 53
	.BYTE 04,7A,2A,0D4,0F3	;WAVE 54
	.BYTE 06,7A,2A,0D4,0F3	;WAVE 55
	.BYTE 0	;WAVE 56
	.BYTE 06,7A,2A,0D4,0F3	;WAVE 57
	.BYTE 08,7A,2A,0D4,0F3	;WAVE 58
	.BYTE 0A,7A,2A,0D4,0F3	;WAVE 59
	.BYTE 0	;WAVE 60
	.END
                                                                                   