	.TITLE BBPOKY POKEY SOUNDS (NO MUSIC)
	.INCLUDE BBRAM
	.INCLUDE HLL65F		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;
;      *******************************************************
;      * COPYRIGHT 1982 ATARI. UNAUTHORIZED REPRODUCTION,    *
;      * ADAPTATION, DISTRIBUTION, PERFORMANCE OR DISPLAY OF *
;      * THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL *
;      * WORK IS STRICTLY PROHIBITED!!!!!!!                  *
;      *******************************************************
	.SBTTL GLOBLS
;ENTRY POINTS (AS SUBROUTINES)
	.GLOBL SNDON,MODSND,INISOU
				;
	.PAGE
	.SBTTL SOUND DESCRIPTION
;THE FOLLOWING MUST BE DEFINED SOME WHERE IN YOUR RAM ALLOCATION
;SOUND ROUTINE VARIABLES
	
	.REPT 0
POINT:	.BLKB NCHANL			;POINTER OFFSET INTO DATA TABLES(IF 0, CHANNEL NOT ACTIVE)
CURRENT:.BLKB NCHANL			;OUTPUT VALUE
FRAMES:	.BLKB NCHANL			;FRAMES UNTIL NEXT CHANGE
COUNT:	.BLKB NCHANL			;COUNT OF TOTAL CHANGES
;*** NOTE: 'IDLEV' CAN BE REPLACED BY A 6 BYTE TABLE WITH
;          NO CHANGE TO THE CODE. USING RAM ALLOWS YOU TO 
;	   CHANGE THE OUTPUT SOUND WITHOUT USING 'STSOUND'
;	   BY SIMPLY PUTTING THE DESIRED SOUND INFORMATION
;	   INTO THE ABOVE 6 BYTE. THE SOUND ROUTINES WILL
;	   CONTINUE TO OUTPUT THIS 'FORCED' SOUND UNTIL
;	   YOU CALL 'STSOUND' OR PUT SOME OTHER VALUE INTO
;	   'IDLEV'. IF YOU USE A TABLE, THE FOLLOWING DATA
;	   IS RECOMENDED:
;	IDLEV:	.BYTE 0C0,0,1F,80,0FE,80
;*************************************************************
;
	.ENDR
;EACH TABLE ENTRY IS 4 BYTES DESCRIBING A SEQUENCE, CONSISTING OF:
STVAL	=0			;VALUE TO START SEQUENCE
FRCNT	=1			;# OF FRAMES BEFORE ANY CHANGE
CHANGE	=2			;AMOUNT OF CHANGE
NUMBER	=3			;TOTAL NUMBER OF CHANGES IN THIS SEQUENCE
AUDF1	=POKEY1
AUDCTL	=POKEY1+8
AUD2F1	=POKEY2
AUD2CT	=POKEY2+8
;EX1: 0FF,1,-1,6 DESCRIBES THE FOLLOWING SEQUENCE
;	0FF,0FE,0FD,0FC,0FB,0FA,0F9
;EX2: 0,45,0,1 WILL OUTPUT 0 FOR 46 FRAMES
;
	.PAGE
	.SBTTL OFFSET MACROS FOR SOUND ROUTINES
	.MACRO OFFSET,LABEL
	.IRPC X,<12345678>
	.IRPC Y,FA
	.IF DF,LABEL''X''Y
	.BYTE <LABEL''X''Y-SOUND>/2-2
	.IFF
	.BYTE 0
	.ENDC
	.ENDR
	.ENDR
	SID'LABEL=.-PNTRS-1
	.ENDM
;
;THE ABOVE MACRO GENERATES THE OFFSETS FROM THE 'SOUND' BASE ADDRESS
;FOR A CHANNEL OF DATA.
;IF LESS THAN 6 CHANNELS ARE USED, THE REMAINING POINTERS ARE SET TO 0
;A 0 VALUE POINTER INDICATES AN IDLE CHANNEL.
;
;EX: SOUND: .BYTE 0
;
;    CH1:   .BYTE 0,45,0,1
;    CH2:   .BYTE 0,45,0,2,3,7,9,1
;
;BY CALLING 'OFFSET CH' , THE FOLLOWING WILL BE PLACED IN LINE
;	    .BYTE CH1-SOUND
;	    .BYTE CH2-SOUND
;	    .BYTE 0,0,0,0
;
	.PAGE
	.SBTTL SOUND TABLES
;
;TABLES OF OFFSET POINTER FOR SOUNDS. (6 BYTES PER SOUND NUMBER)
CKUM5::	.BYTE 90
PNTRS:
	OFFSET PF	;PLAYER FIRES (CH1)
	OFFSET LS	;LETTER OR LEVEL SELECT
	OFFSET EG	;EGG PUSHED OFF
	OFFSET PH	;PLAYER HITS A CRITTER (CH2)
	OFFSET OF	;OBJECT FALLS (CH3)
	OFFSET OE	;OBJECT EATEN (CH4)
	OFFSET BL	;BONUS LIFE AWARDED (CH?)
	OFFSET HE	;HORNET LAYS AN EGG
	OFFSET EW	;END OF A WAVE
	OFFSET OO	;FFF LAUNCHES
	OFFSET OB	;OBJECT BUMPS FENCE
	OFFSET EX	;GRENADE EXPLODES
	OFFSET OX	;OTHER EXPLOSIONS
	OFFSET PP	;PLAYER DIES
	OFFSET MK	;MADE THE CHARTS
PTLEN	=.-PNTRS
	.PAGE
;AUDIO CONTROL CHANNEL VALUE (1 BYTE PRE SOUND NUMBER)
AUDCV	=00
AUDCV2	=00
	
;SOUND TABLES
				;ALL OF THESE LABELS GO
				;HRE SO THEY HAVE AN
				;OFFSET OF 0, WHICH
				;PREVENTS THE SOUND FROM
				;AFFECTING THOSE CHANNELS
				;WHICH HAVE AN OFFSET
				;OF 0
SOUND=.-6
	.PAGE
				;A GOOD PLACE FOR THE CHECKSUM
;DATA STRUCTURE:
;A CHANNEL CONSISTS OF A SERIES OF 4 BYTE SEQUENCES:
;	BYTE		FUNCTION
;	 1		 STARTING VALUE OF SEQUENCE
;	 2		 # OF FRAMES BEFORE NEXT CHANGE
;	 3		 AMOUNT OF CHANGE (SEE NOTE 1)
;	 4		 TOTAL NUMBER OF CHANGES+1 (# OF DIFFERENT VALUES)
;TO STOP A CHANNEL, PUT IN 0,0
;TO LOOP BACK, PUT IN X,0, WHERE X=
;<OFFSET FROM SOUND: OF RESTART LOC>/2
;NOTE 1: FOR NOISE/AMPLITUDE CHANNEL, AMPLITUDE WILL
;NOT OVERFLOW INTO NOISE
;
;
;PLAYER FIRES
;AUDCTL=00
;
PF8F:	.BYTE 0,2,1,0F
	.BYTE 0,0
PF8A:	.BYTE 2F,2,-1,15.
	.BYTE 0,0
;
;BULLET CONNECTS
;AUDCTL=00
;
PH2F:	.BYTE 0,4,0E,3
	.BYTE 79,4,0E,3
	.BYTE 0,4,0E,3
	.BYTE 51,4,0E,7
	.BYTE 0,0
;
PH2A:	.BYTE 8F,4,0,3
	.BYTE 0AF,4,-1,3
	.BYTE 8B,4,-1,3
	.BYTE 0A6,4,-1,7
	.BYTE 0,0
;
; BONUS LIFE
;
BL1F:	.BYTE 06,30,0,3
	.BYTE 0,0
BL1A:	.REPT 3
	.BYTE 0AF,18,0,1,0A0,18,0,1
	.ENDR
	.BYTE 0,0
;
; OBJECTS SPIRALS TO THE SIDEWALK
;
OF3F:	.BYTE 0,8,0,2
	.BYTE 10,8,10,3
	.BYTE 20,8,10,3
	.BYTE 30,8,10,3
	.BYTE 40,8,10,3
	.BYTE 50,8,10,3
	.BYTE 60,8,10,3
	.BYTE 0,0
OF3A:	.BYTE 2F,8,0,2
	.BYTE 0AF,8,0,4
	.BYTE 0AD,8,-1,0E
	.BYTE 0,0
;
; FFF LAUNCHES A TORPEDO AT PLAYER
;
; OH-OH FFF LAUNCHES A LITTLE ONE
OO5F:	.BYTE 60,10,0,1
	.BYTE 50,10,0F8,1
	.BYTE 48,10,18,1
	.BYTE 60,18,0F0,1
	.BYTE 60,10,0F8,1
	.BYTE 60,10,8,10
	.BYTE 0,0
OO5A:	.BYTE 8C,20,2,1
	.BYTE 8E,10,0,4
	.BYTE 8E,38,0FF,4
	.BYTE 0,18,0,1
	.BYTE 0,0
;
; OBJECT IS EATEN BY A MUTANT OR BEETLE
;
OE5F:
	.BYTE 0,4,10,0A
	.BYTE 0,4,10,0A
	.BYTE 0,0
OE5A:	.BYTE 5,4,5,2
	.BYTE 0CF,4,0,2
	.BYTE 0F,4,0,2
	.BYTE 0,4,0,4
	.BYTE 0C5,4,5,2
	.BYTE 0F,4,0,2
	.BYTE 0CF,4,0,2
	.BYTE 0,4,0,4
	.BYTE 0,0
;
;
; SELECTION OF LETTERS OR LEVEL SOUND
;
LS5F:	.BYTE 0F,4,0,1
	.BYTE 0,0
LS5A:	.BYTE 0A8,4,40,1
	.BYTE 0,0
; HORNET LAYS AN EGG
;
HE4F:
	.REPT 5
	.BYTE 0F0,9,-10,2
	.BYTE 0D0,9,10,2
	.ENDR
	.BYTE 0,0
HE4A:
	.BYTE 0AF,9,-1,0A
	.BYTE 0A7,9,1,0A
	.BYTE 0,0
;
;
;$ MUTANT FFF EXPLOSION
;
OX3F:	.BYTE 8,4,20,0A
	.BYTE 8,4,1,9
	.BYTE 10,0C,4,0C
	.BYTE 0,0
OX3A:	.BYTE 0F,4,0,0A
	.BYTE 6F,4,0,9
	.BYTE 6F,10,0FF,9
	.BYTE 0,0
;
; OBJECT BUMPS AGAINST FENCE
;
OB6F:	.BYTE 0B0,2,0,11,0,0
OB6A:	.BYTE 0C0,2,2,11,0,0
;
; END OF WAVE SOUND
;
EW4F:	.BYTE 60,1,0,1
	.BYTE 60,1,0FF,40
	.BYTE 48,1,0FF,30
	.BYTE 30,1,0FF,20
	.BYTE 24,1,0FF,18
	.BYTE 1E,1,0FF,14
	.BYTE 1B,1,0FF,12
	.BYTE 18,1,0FF,10
	.BYTE 0,0
EW4A:	.BYTE 0A8,0DE,0,1
	.BYTE 0A0,1,0,1
	.BYTE 0,0
;
; PLAYER DIES
;AUDCTL=00
;
; GRENADE EXPLODE SOUND
;
; SAME AS PALYER DEATH CRUNCH
;
EX4F:
PP6F:	.BYTE 0,4,0,6
	.BYTE 1B,4,0E,3
	.BYTE 0,4,0,1
	.BYTE 51,4,0E,3
	.BYTE 0,4,0,1
	.BYTE 87,4,0E,3
	.BYTE 0,4,0,1
	.BYTE 0BD,4,0E,2
	.BYTE 0,0

EX4A:
PP6A:	.BYTE 4F,4,0,3
	.BYTE 8F,4,0,3
	.BYTE 0AE,4,-1,3
	.BYTE 4B,4,0,1
	.BYTE 0AA,4,-1,3
	.BYTE 47,4,0,1
	.BYTE 0A6,4,-1,3
	.BYTE 43,4,0,1
	.BYTE 0A2,4,-2,2
	.BYTE 0,0
PP7F:	.BYTE 0A,0FF,0,10
	.BYTE 0,0
PP7A:	.BYTE 40,20,1,0A
	.BYTE 4A,10,1,06
	.BYTE 0,0
;
; MADE THE CHARTS SOUND
;
;AUDCTL=01
;
MK1F:
	.BYTE 20,1,0,3
	.BYTE 70,1,10,6
	.BYTE 0,0
MK1A:
	.BYTE 0AF,1,0FE,2
	.BYTE 0A0,1,0,1
	.BYTE 0A2,2,0FF,3
	.BYTE 0,0
;
; EGG PUSHED OFF
;
EG2F:	.BYTE 36,10,0,3
	.BYTE 43,10,0E,0A
	.BYTE 0D0,10,0,7
	.BYTE 0,0
;
EG2A:	.BYTE 0A3,10,4,4
	.BYTE 0AF,10,-1,10
	.BYTE 0,0
;
	.IF NE,0
;
;COINS INSERTED
;AUDCTL=00
;
F:	.BYTE 0,4,94,2
	.BYTE 0E,4,86,2
	.BYTE 0,4,0A2,2
	.BYTE 0E,4,94,2
	.BYTE 0,4,0AF,2
	.BYTE 0E,4,0A1,2
	.BYTE 0,4,0BD,2
	.BYTE 0E,4,0AF,2
	.BYTE 0,4,0CA,2
	.BYTE 0E,4,0BC,2
	.BYTE 0,0


A:	.BYTE 8F,4,0,1
	.BYTE 0AF,4,0,1
	.BYTE 8F,4,0,1
	.BYTE 0AF,4,0,1
	.BYTE 8F,4,0,1
	.BYTE 0AE,4,0,1
	.BYTE 8D,4,0,1
	.BYTE 0AC,4,0,1
	.BYTE 8B,4,0,1
	.BYTE 0AA,4,0,1
	.BYTE 89,4,0,1
	.BYTE 0A8,4,0,1
	.BYTE 87,4,0,1
	.BYTE 0A6,4,0,1
	.BYTE 85,4,0,1
	.BYTE 0A4,4,0,1
	.BYTE 83,4,0,1
	.BYTE 0A2,4,0,1
	.BYTE 81,4,0,1
	.BYTE 0A0,4,0,1
	.BYTE 0,0

	.ENDC
	.PAGE
SNDPF::	LDA #SIDPF
	BNE SNDON	;PLAYER SHOOTS
SNDOO::	LDA #SIDOO	;TORPEDO LAUNCHED
	BNE SNDON
SNDPH::	LDA #SIDPH
	BNE SNDON	;PLAYER CONNECTS
SNDOF::	LDA #SIDOF
	BNE SNDON	;OBJECT FALLS
SNDLS::	LDA #SIDLS
	BNE SNDON
SNDOE::	LDA #SIDOE
	BNE SNDON	;OBJECT EATEN
SNDBL::	LDA #SIDBL
	BNE SNDON	;BONUS LIFE
SNDHE::	LDA #SIDHE	;HORNET LAYS EGG
	BNE SNDON
SNDOB::	LDA #SIDOB
	BNE SNDON	;BONK OFF FENCE
SNDEX::	LDA #SIDEX	;BOOM
	BNE SNDON
SNDOX::	LDA #SIDOX	;OTHER EXPLOSION
	BNE SNDON
SNDEG::	LDA #SIDEG
	BNE SNDON
SNDPP::	LDA #SIDPP
	BNE SNDON
SNDEW::	LDA #SIDEW
	BNE SNDON
SNDMK::	LDA #SIDMK
SNDON:	BIT ATRACT		;ATTRACT MODE?
	IFPL			;NO, OK TO START A SOUND
BADHAB:	STX TEMPA
	STY TEMPA+1
	TAY			;USE AS INDEX
	LDX I,NCHANL-1			;NO.
	BEGIN			;--;LOOP FOR EACH 1/2 CHANNEL
	LDA Y,PNTRS
	IFNE			;IF POINTER 0 DONT TOUCH THIS CHANNEL
	STX SINDEX
	STA X,POINT		;IF NOT SET UP POINTER 
	LDA I,1
	STA X,FRAMES		;DUMMY START, NO SOUND
	STA X,COUNT		;TILL MODSND STORES TO POKEY
	LDA I,-1
	STA SINDEX
	THEN
	DEY
	DEX
	MIEND
	LDX TEMPA		;RESTORE X & Y UPON RETURN
	LDY TEMPA+1
	THEN
	RTS
	.PAGE
	.SBTTL SOUND ROUTINE
;
;CONTINUES A PREVIOUSLY STARTED SOUND
;WHEN CHANNEL 1 GOES IDLE, ALL SOUND ENDS
;
MODSND:
	LDX I,NCHANL-1			;8 CHANNELS
	BEGIN
	LDA X,POINT
	IFNE			;1 SET OF FRAMES EXPIRED?
	CPX SINDEX
	IFNE
	DEC X,FRAMES		;YES
	IFEQ			;SUBCHANNEL ACTIVE?
	DEC X,COUNT		;YES.
	IFEQ			;MOVE TO NEXT CHANGE GROUP?
RESOUN:	INC X,POINT		;YES. START VALUE
	INC X,POINT
	LDA X,POINT
	ASL
	TAY
	IFCC
	LDA Y,SOUND+STVAL
	STA X,CURRENT
	LDA Y,SOUND+NUMBER
	STA X,COUNT
	LDA Y,SOUND+FRCNT
	ELSE
	LDA Y,SOUND+STVAL+100
	STA X,CURRENT
	LDA Y,SOUND+NUMBER+100
	STA X,COUNT
	LDA Y,SOUND+FRCNT+100
	ENDIF
	STA X,FRAMES
	IFEQ			;CHANNEL STILL ALIVE?
	STA X,POINT		;NO. KILL IT
	LDA X,CURRENT
	IFNE			;RESTART CHANNEL?
	STA X,POINT		;YES. UPDATE PTR. WITH RESTART LOC
	BNE RESOUN
	ENDIF
	ENDIF			;
	ELSE			;NO. MAKE CHANGE IN OLD GROUP
	ASL
	TAY
	IFCC
	LDA Y,SOUND+FRCNT
	STA X,FRAMES
	LDA Y,SOUND+CHANGE
	ELSE
	LDA Y,SOUND+FRCNT+100
	STA X,FRAMES
	LDA Y,SOUND+CHANGE+100
	ENDIF
	LDY X,CURRENT
	CLC
	ADC X,CURRENT
	STA X,CURRENT
	TXA
	LSR
	IFCS
	TYA
	EOR X,CURRENT
	AND I,0F0
	EOR X,CURRENT
	STA X,CURRENT
	ENDIF
	ENDIF
	LDA X,CURRENT		;UPDATE POKEY AUDIO CHANNEL
	CPX I,8
	IFCS
	STA X,AUD2F1-8
	ELSE
	STA X,AUDF1
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	DEX
	MIEND
	RTS
	.PAGE
INISOU:	LDA I,0
	STA A,AUDF1+0F
	STA AUD2F1+0F
	LDA I,7
	STA A,AUDF1+0F
	STA AUD2F1+0F
	LDX I,7
	LDA I,0
	BEGIN
	STA AX,AUDF1
	STA X,AUD2F1
	STA X,POINT
	STA X,CURRENT
	DEX
	MIEND
	LDA I,AUDCV
	STA AUDCTL
	LDX #0			;DEFAULT VALUE FOR AUDCV2
	STX AUD2CT
	RTS
	HLL65
	.PAGE
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                     